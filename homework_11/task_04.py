"""
Разработать класс Matrix, представляющий матрицу и обеспечивающий базовые операции с матрицами.

Атрибуты класса:

rows (int): Количество строк в матрице.
cols (int): Количество столбцов в матрице.
data (list): Двумерный список, содержащий элементы матрицы.

Методы класса:

__init__(self, rows, cols): Конструктор класса, который инициализирует атрибуты rows и cols,
а также создает двумерный список data размером rows x cols и заполняет его нулями.

__str__(self): Метод, возвращающий строковое представление матрицы.
Возвращаемая строка представляет матрицу, где элементы разделены пробелами, а строки разделены символами новой строки.
Например:
1 2 3
4 5 6

__repr__(self): Метод, возвращающий строковое представление объекта,
которое может быть использовано для создания нового объекта того же класса с такими же размерами и данными.

__eq__(self, other): Метод, определяющий операцию "равно" для двух матриц.
Сравнивает две матрицы и возвращает True, если они имеют одинаковое количество строк и столбцов,
а также все элементы равны. Иначе возвращает False.

__add__(self, other): Метод, определяющий операцию сложения двух матриц.
Проверяет, что обе матрицы имеют одинаковые размеры (количество строк и столбцов).
Если размеры совпадают, создает новую матрицу, где каждый элемент равен сумме соответствующих элементов входных матриц.

__mul__(self, other): Метод, определяющий операцию умножения двух матриц.
Проверяет, что количество столбцов в первой матрице равно количеству строк во второй матрице.
Если условие выполняется, создает новую матрицу, где элемент на позиции [i][j] равен сумме произведений элементов
соответствующей строки из первой матрицы и столбца из второй матрицы.

Пример

На входе:
# Создаем матрицы
matrix1 = Matrix(2, 3)
matrix1.data = [[1, 2, 3], [4, 5, 6]]

matrix2 = Matrix(2, 3)
matrix2.data = [[7, 8, 9], [10, 11, 12]]

# Выводим матрицы
print(matrix1)

print(matrix2)

На выходе:
1 2 3
4 5 6
7 8 9
10 11 12

На входе:
# Сравниваем матрицы
print(matrix1 == matrix2)

На выходе:
False
На входе:


# Выполняем операцию сложения матриц
matrix_sum = matrix1 + matrix2
print(matrix_sum)

На выходе:
8 10 12
14 16 18

На входе:
# Выполняем операцию умножения матриц
matrix3 = Matrix(3, 2)
matrix3.data = [[1, 2], [3, 4], [5, 6]]

matrix4 = Matrix(2, 2)
matrix4.data = [[7, 8], [9, 10]]

result = matrix3 * matrix4
print(result)

На выходе:
25 28
57 64
89 100
"""


class Matrix:
    """Класс Matrix, представляющий матрицу и обеспечивающий базовые операции с матрицами."""

    def __init__(self, rows, cols):
        """__init__(self, rows, cols): Конструктор класса, который инициализирует атрибуты rows и cols,
а также создает двумерный список data размером rows x cols и заполняет его нулями.
        """
        self.rows = rows
        self.cols = cols
        self.__data = [[0] * cols for _ in range(rows)]

    @property
    def data(self):
        return self.__data

    @data.setter
    def data(self, value: list):
        self.__data = value
        self.rows = len(self.__data)
        self.cols = len(self.__data[0])

    def __str__(self):
        """__str__(self): Метод, возвращающий строковое представление матрицы.
        """
        return "\n".join([" ".join([str(col) for col in row]) for row in self.__data])

    def __repr__(self):
        """__repr__(self): Метод, возвращающий строковое представление объекта,
        которое может быть использовано для создания нового объекта того же класса с такими же размерами и данными.
        """
        return f"Matrix({self.rows, self.cols})"

    def __eq__(self, other):
        """__eq__(self, other): Метод, определяющий операцию "равно" для двух матриц.
        Сравнивает две матрицы и возвращает True, если они имеют одинаковое количество строк и столбцов,
        а также все элементы равны. Иначе возвращает False."""
        if self.rows != other.rows or self.cols != other.cols:
            return False
        return all(
            self.__data[row][col] == other.__data[row][col] for row in range(self.rows) for col in range(self.cols))

    def __add__(self, other):
        """__add__(self, other): Метод, определяющий операцию сложения двух матриц.
        Проверяет, что обе матрицы имеют одинаковые размеры (количество строк и столбцов).
        Если размеры совпадают, создает новую матрицу,
        где каждый элемент равен сумме соответствующих элементов входных матриц."""
        if self.rows == other.rows and self.cols == other.cols:
            new_matrix = Matrix(self.rows, self.cols)
            new_matrix.data = [[self.__data[row][col] + other.__data[row][col] for col in range(self.cols)] for row in
                               range(self.rows)]
            return new_matrix
        return self

    def __mul__(self, other):
        """__mul__(self, other): Метод, определяющий операцию умножения двух матриц.
        Проверяет, что количество столбцов в первой матрице равно количеству строк во второй матрице.
        Если условие выполняется, создает новую матрицу, где элемент на позиции [i][j] равен сумме произведений элементов
        соответствующей строки из первой матрицы и столбца из второй матрицы."""
        if self.cols == other.rows:
            new_matrix = Matrix(self.rows, self.cols)
            """Результат перемножения матриц"""
            for i in range(self.rows):
                for j in range(other.cols):
                    new_matrix.data[i][j] = sum(
                        self.__data[i][k] * other.__data[k][j] for k in range(self.cols))
            return new_matrix
        return self


if __name__ == '__main__':
    # Создаем матрицы
    matrix1 = Matrix(2, 3)
    matrix1.data = [[1, 2, 3], [4, 5, 6]]

    matrix2 = Matrix(2, 3)
    matrix2.data = [[7, 8, 9], [10, 11, 12]]

    # Выводим матрицы
    print(matrix1)

    print(matrix2)

    # Сравниваем матрицы
    print(matrix1 == matrix2)

    # Выполняем операцию сложения матриц
    matrix_sum = matrix1 + matrix2
    print(matrix_sum)

    # Выполняем операцию умножения матриц
    matrix3 = Matrix(3, 2)
    matrix3.data = [[1, 2], [3, 4], [5, 6]]

    matrix4 = Matrix(2, 2)
    matrix4.data = [[7, 8], [9, 10]]

    result = matrix3 * matrix4
    print(result)
