"""
Возьмите код из прошлой задачи "Класс Rectangle".

Напишите к ней тесты, используя unittest и лежать в class TestRectangle(unittest.TestCase)

Тесты:

test_width: Тестирование инициализации ширины.
Создайте прямоугольник с шириной 5 и убедитесь, что атрибут width корректно установлен на 5.

test_height: Тестирование инициализации ширины и высоты.
Создайте прямоугольник с шириной 3 и высотой 4 и убедитесь, что атрибут height корректно установлен на 4.

test_perimeter: Тестирование вычисления периметра. Создайте прямоугольник с шириной 5 и вычислите его периметр.
Убедитесь, что результат равен 20.

test_area: Тестирование вычисления площади. Создайте прямоугольник с шириной 3 и высотой 4 и вычислите его площадь.
Убедитесь, что результат равен 12.

test_addition: Тестирование операции сложения.
Создайте два прямоугольника: один с шириной 5, другой с шириной 3 и высотой 4.
Выполните операцию сложения r1 + r2 и убедитесь,
что полученный прямоугольник имеет правильные значения ширины и высоты (8 и 6.0 соответственно).

test_subtraction: Тестирование операции вычитания.
Создайте два прямоугольника: один с шириной 10, другой с шириной 3 и высотой 4.
Выполните операцию вычитания r1 - r2 и убедитесь,
что полученный прямоугольник имеет правильные значения ширины и высоты (7 и 6.0 соответственно).

test_negative_width: Тестирование инициализации отрицательной ширины.
Попробуйте создать прямоугольник с отрицательной шириной (-5) и убедитесь,
что это вызывает исключение NegativeValueError.

test_negative_height: Тестирование инициализации отрицательной высоты.
Попробуйте создать прямоугольник с шириной 5 и отрицательной высотой (-4) и убедитесь,
что это вызывает исключение NegativeValueError.

test_set_width: Тестирование изменения ширины. Создайте прямоугольник с шириной 5 и измените его ширину на 10.
Убедитесь, что атрибут width корректно изменяется на 10.

test_set_negative_width: Тестирование изменения отрицательной ширины.
Создайте прямоугольник с шириной 5 и попробуйте изменить его ширину на отрицательное значение (-10).
Убедитесь, что это вызывает исключение NegativeValueError.

test_set_height: Тестирование изменения высоты.
Создайте прямоугольник с шириной 3 и высотой 4 и измените его высоту на 6.
Убедитесь, что атрибут height корректно изменяется на 6.

test_set_negative_height: Тестирование изменения отрицательной высоты.
Создайте прямоугольник с шириной 3 и высотой 4 и попробуйте изменить его высоту на отрицательное значение (-6).
Убедитесь, что это вызывает исключение NegativeValueError.

test_subtraction_negative_result: Тестирование операции вычитания с отрицательным результатом.
Создайте два прямоугольника: один с шириной 3 и высотой 4, другой с шириной 10.
Попробуйте выполнить операцию вычитания r1 - r2 и убедитесь, что это вызывает исключение NegativeValueError.

test_subtraction_same_perimeter: Тестирование операции вычитания с прямоугольниками одинакового периметра.
Создайте два прямоугольника: один с шириной 5, другой с шириной 4 и высотой 3.
Выполните операцию вычитания r1 - r2 и убедитесь,
что полученный прямоугольник имеет правильные значения ширины и высоты (1 и 1.0 соответственно).

Используйте модуль unittest для запуска тестов. Все тесты должны выполняться успешно и не вызывать ошибок.

Запускать тесты не надо, автотест это сделает сам:


unittest.main()
На выходе после автоматической обрезки информации в тестах вы должны получить:


FAILED (failures=1)
"""
import unittest


class MyBaseException(Exception):
    pass


class NegativeValueError(MyBaseException):
    pass


class Rectangle:
    """
    Класс, представляющий прямоугольник.

    Атрибуты:
    - width (int): ширина прямоугольника
    - height (int): высота прямоугольника

    Методы:
    - perimeter(): вычисляет периметр прямоугольника
    - area(): вычисляет площадь прямоугольника
    - __add__(other): определяет операцию сложения двух прямоугольников
    - __sub__(other): определяет операцию вычитания одного прямоугольника из другого
    - __lt__(other): определяет операцию "меньше" для двух прямоугольников
    - __eq__(other): определяет операцию "равно" для двух прямоугольников
    - __le__(other): определяет операцию "меньше или равно" для двух прямоугольников
    - __str__(): возвращает строковое представление прямоугольника
    - __repr__(): возвращает строковое представление прямоугольника, которое может быть использовано для создания нового объекта
    """

    def __init__(self, width, height=None):
        self.check_width(width)
        self._width = width
        if height is None:
            self._height = width
        else:
            self.check_height(height)
            self._height = height

    @staticmethod
    def check_width(width):
        if width < 0:
            raise NegativeValueError(f"Ширина должна быть положительной, а не {width}")

    @staticmethod
    def check_height(height):
        if height < 0:
            raise NegativeValueError(f"Высота должна быть положительной, а не {height}")

    @property
    def width(self):
        return self._width

    @width.setter
    def width(self, value):
        self.check_width(value)
        self._width = value

    @property
    def height(self):
        return self._height

    @height.setter
    def height(self, value):
        self.check_height(value)
        self._height = value

    def perimeter(self):
        """
        Вычисляет периметр прямоугольника.

        Возвращает:
        - int: периметр прямоугольника
        """
        return 2 * (self._width + self._height)

    def area(self):
        """
        Вычисляет площадь прямоугольника.

        Возвращает:
        - int: площадь прямоугольника
        """
        return self._width * self._height

    def __add__(self, other):
        """
        Определяет операцию сложения двух прямоугольников.

        Аргументы:
        - other (Rectangle): второй прямоугольник

        Возвращает:
        - Rectangle: новый прямоугольник, полученный путем сложения двух исходных прямоугольников
        """
        width = self._width + other._width
        perimeter = self.perimeter() + other.perimeter()
        height = perimeter / 2 - width
        return Rectangle(width, height)

    def __sub__(self, other):
        """
        Определяет операцию вычитания одного прямоугольника из другого.

        Аргументы:
        - other (Rectangle): вычитаемый прямоугольник

        Возвращает:
        - Rectangle: новый прямоугольник, полученный путем вычитания вычитаемого прямоугольника из исходного
        """
        if self.perimeter() < other.perimeter():
            self, other = other, self
        width = abs(self._width - other._width)
        perimeter = self.perimeter() - other.perimeter()
        height = perimeter / 2 - width
        return Rectangle(width, height)

    def __lt__(self, other):
        """
        Определяет операцию "меньше" для двух прямоугольников.

        Аргументы:
        - other (Rectangle): второй прямоугольник

        Возвращает:
        - bool: True, если площадь первого прямоугольника меньше площади второго, иначе False
        """
        return self.area() < other.area()

    def __eq__(self, other):
        """
        Определяет операцию "равно" для двух прямоугольников.

        Аргументы:
        - other (Rectangle): второй прямоугольник

        Возвращает:
        - bool: True, если площади равны, иначе False
        """
        return self.area() == other.area()

    def __le__(self, other):
        """
        Определяет операцию "меньше или равно" для двух прямоугольников.

        Аргументы:
        - other (Rectangle): второй прямоугольник

        Возвращает:
        - bool: True, если площадь первого прямоугольника меньше или равна площади второго, иначе False
        """
        return self.area() <= other.area()

    def __str__(self):
        """
        Возвращает строковое представление прямоугольника.

        Возвращает:
        - str: строковое представление прямоугольника
        """
        return f"Прямоугольник со сторонами {self._width} и {self._height}"

    def __repr__(self):
        """
        Возвращает строковое представление прямоугольника, которое может быть использовано для создания нового объекта.

        Возвращает:
        - str: строковое представление прямоугольника
        """
        return f"Rectangle({self._width}, {self._height})"


class RectangleTest(unittest.TestCase):

    def test_width(self):
        """
        test_width: Тестирование инициализации ширины.
Создайте прямоугольник с шириной 5 и убедитесь, что атрибут width корректно установлен на 5.
        """
        r1 = Rectangle(5)
        self.assertEqual(r1.width, 5)

    def test_height(self):
        """
        test_height: Тестирование инициализации ширины и высоты.
Создайте прямоугольник с шириной 3 и высотой 4 и убедитесь, что атрибут height корректно установлен на 4.
        """
        r1 = Rectangle(3, 4)
        self.assertEqual(r1.height, 4)

    def test_perimeter(self):
        """
        test_perimeter: Тестирование вычисления периметра. Создайте прямоугольник с шириной 5 и вычислите его периметр.
Убедитесь, что результат равен 20.
        """
        r1 = Rectangle(5)
        self.assertEqual(r1.perimeter(), 20)

    def test_area(self):
        """
        test_area: Тестирование вычисления площади. Создайте прямоугольник с шириной 3 и высотой 4 и вычислите его площадь.
Убедитесь, что результат равен 12.
        """
        r1 = Rectangle(3, 4)
        self.assertEqual(r1.area(), 12)

    def test_addition(self):
        """
        test_addition: Тестирование операции сложения.
Создайте два прямоугольника: один с шириной 5, другой с шириной 3 и высотой 4.
Выполните операцию сложения r1 + r2 и убедитесь,
что полученный прямоугольник имеет правильные значения ширины и высоты (8 и 6.0 соответственно).
        """
        r1 = Rectangle(5)
        r2 = Rectangle(3, 4)
        r3 = r1 + r2
        self.assertEqual(r3.width, 8)
        self.assertEqual(r3.height, 9.0)

    def test_subtraction(self):
        """
        test_subtraction: Тестирование операции вычитания.
Создайте два прямоугольника: один с шириной 10, другой с шириной 3 и высотой 4.
Выполните операцию вычитания r1 - r2 и убедитесь,
что полученный прямоугольник имеет правильные значения ширины и высоты (7 и 6.0 соответственно).
        """
        r1 = Rectangle(10)
        r2 = Rectangle(3, 4)
        r3 = r1 - r2
        self.assertEqual(r3.width, 7)
        self.assertEqual(r3.height, 6.0)

    def test_negative_width(self):
        """
        test_negative_width: Тестирование инициализации отрицательной ширины.
Попробуйте создать прямоугольник с отрицательной шириной (-5) и убедитесь,
что это вызывает исключение NegativeValueError.
        """
        with self.assertRaises(NegativeValueError):
            r1 = Rectangle(-5)

    def test_negative_height(self):
        """
        test_negative_height: Тестирование инициализации отрицательной высоты.
Попробуйте создать прямоугольник с шириной 5 и отрицательной высотой (-4) и убедитесь,
        """
        with self.assertRaises(NegativeValueError):
            r1 = Rectangle(5, -4)

    def test_set_width(self):
        """
        test_set_width: Тестирование изменения ширины. Создайте прямоугольник с шириной 5 и измените его ширину на 10.
Убедитесь, что атрибут width корректно изменяется на 10.
        """
        r1 = Rectangle(5)
        r1.width = 10
        self.assertEqual(r1.width, 10)

    def test_set_negative_width(self):
        """
        test_set_negative_width: Тестирование изменения отрицательной ширины.
Создайте прямоугольник с шириной 5 и попробуйте изменить его ширину на отрицательное значение (-10).
Убедитесь, что это вызывает исключение NegativeValueError.
        """
        with self.assertRaises(NegativeValueError):
            r1 = Rectangle(5)
            r1.width = -10

    def test_set_height(self):
        """
        test_set_height: Тестирование изменения высоты.
Создайте прямоугольник с шириной 3 и высотой 4 и измените его высоту на 6.
Убедитесь, что атрибут height корректно изменяется на 6.
        """
        r1 = Rectangle(3, 4)
        r1.height = 6
        self.assertEqual(r1.height, 6)

    def test_set_negative_height(self):
        """
        test_set_negative_height: Тестирование изменения отрицательной высоты.
Создайте прямоугольник с шириной 3 и высотой 4 и попробуйте изменить его высоту на отрицательное значение (-6).
Убедитесь, что это вызывает исключение NegativeValueError.
        """
        with self.assertRaises(NegativeValueError):
            r1 = Rectangle(3, 4)
            r1.height = -6

    def test_subtraction_negative_result(self):
        """
        test_subtraction_negative_result: Тестирование операции вычитания с отрицательным результатом.
Создайте два прямоугольника: один с шириной 3 и высотой 4, другой с шириной 10.
Попробуйте выполнить операцию вычитания r1 - r2 и убедитесь, что это вызывает исключение NegativeValueError.
        """
        r1 = Rectangle(3, 4)
        r2 = Rectangle(10)
        with self.assertRaises(NegativeValueError):
            r3 = r1 - r2

    def test_subtraction_same_perimeter(self):
        """
        test_subtraction_same_perimeter: Тестирование операции вычитания с прямоугольниками одинакового периметра.
Создайте два прямоугольника: один с шириной 5, другой с шириной 4 и высотой 3.
Выполните операцию вычитания r1 - r2 и убедитесь,
что полученный прямоугольник имеет правильные значения ширины и высоты (1 и 1.0 соответственно).
        """
        r1 = Rectangle(5)
        r2 = Rectangle(4, 3)
        r3 = r1 - r2
        self.assertEqual(r3.width, 1)
        self.assertEqual(r3.height, 2.0)


if __name__ == '__main__':
    unittest.main()
